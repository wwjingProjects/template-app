plugins {
    id 'java'
    id 'application'
    id 'org.hidetake.ssh' version '2.9.0'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

////////////////////////////////////////////////////////////////////////////////
//                                [1] [2] 运行、打包                           //
////////////////////////////////////////////////////////////////////////////////
// [1.1] 从命令行运行默认类: gradle run
// [1.2] 从命令行运行某个类: gradle run -DmainClass=ImServer
ext {
    project.mainClassName = System.getProperty("mainClass", "ImServer")
    shadowJar.archiveFileName = 'im-server.jar'

    // 运行、打包以及部署的环境选择, 默认是开发环境(即命令没有 -Denv 参数)
    // 运行: gradle run，gradle run -DmainClass=ImServer
    // 构建: gradle clean shadowJar, gradle clean shadowJar -Denv=production
    // 部署: gradle clean deploy,    gradle clean deploy    -Denv=production
    environment = System.getProperty("env", "dev") // 获取 gradle 参数中 env 的值，选择环境
    config = new ConfigSlurper(environment).parse(file('config.groovy').toURI().toURL()).toProperties()
    println "加载配置用于环境: ${environment}"
}

// [2] 打包: gradle clean shadowJar [-DmainClass=Foo]
shadowJar {
    mergeServiceFiles('META-INF/spring.*')
}

////////////////////////////////////////////////////////////////////////////////
//                                 [3] Maven 依赖                             //
////////////////////////////////////////////////////////////////////////////////
repositories {
    mavenCentral()
}

ext.versions = [
        spring     : '5.0.2.RELEASE',
        tio        : '3.3.6.v20190725-RELEASE',
        fastjson   : '1.2.41',
        logback    : '1.3.0-alpha4',
        slf4j      : '1.7.25',
        lombok     : '1.16.20',
        commonsLang: '3.7',
        mongodb    : '2.1.2.RELEASE',
]

dependencies {
    compile(
            "org.springframework:spring-context-support:${versions.spring}",
            "org.springframework.data:spring-data-mongodb:${versions.mongodb}",
            "org.t-io:tio-websocket-server:${versions.tio}",
            "org.apache.commons:commons-lang3:${versions.commonsLang}",
            "com.alibaba:fastjson:${versions.fastjson}"
    )

    // Log dependencies
    compile(
            "ch.qos.logback:logback-classic:${versions.logback}", // slf4j-logback绑定
            "org.slf4j:jcl-over-slf4j:${versions.slf4j}",         // redirect apache commons logging
            "org.slf4j:jul-to-slf4j:${versions.slf4j}",           // redirect jdk util logging
            "org.slf4j:log4j-over-slf4j:${versions.slf4j}",       // redirect log4j
    )

    testCompile 'junit:junit:4.12'

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
}

////////////////////////////////////////////////////////////////////////////////
//                                  资源动态替换                                //
////////////////////////////////////////////////////////////////////////////////
processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    filteringCharset = 'UTF-8'
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: config)
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                   项目部署                                  //
////////////////////////////////////////////////////////////////////////////////
remotes {
    server {
        host     = config.getProperty('deploy.host')
        user     = config.getProperty('deploy.username')
        password = config.getProperty('deploy.password')
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

task deploy(dependsOn: shadowJar) {
    def jar  = shadowJar.archiveFileName
    def dir  = config.getProperty('deploy.dir')
    def path = "${dir}/${jar}"

    doLast {
        ssh.run {
            session(remotes.server) {
                put from: "${buildDir}/libs/${jar}", into: "${path}.bak"
                execute """
                    source /root/.bash_profile;
                    kill `ps aux | grep -i ${jar} | grep -v grep | awk '{print \$2}'`;
                    mv -f ${path}.bak ${path};
                    nohup java -jar -Dfile.encoding=UTF-8 ${path} > /dev/null 2>&1 &
                """
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    JVM                                     //
////////////////////////////////////////////////////////////////////////////////
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}
